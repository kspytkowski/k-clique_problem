/*
 * authors: Wojciech Kasperek & Krzysztof Spytkowski & Izabela Åšmietana
 */
package GUI;

import Controller.ApplicationController;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;

public class ResultsViewPanel extends javax.swing.JPanel {

    private final GraphPanel graphPanel; // graph panel, to show graph
    private final ApplicationController controller; // application controller

    /**
     * Constructor.
     * 
     * @param graphPanel
     * @param controller
     */
    public ResultsViewPanel(GraphPanel graphPanel, ApplicationController controller) {
        initComponents();
        this.graphPanel = graphPanel;
        this.controller = controller;
    }

    /**
     * Actualizes spinner (max value is equal to number of iterations).
     */
    public void actualizeIterationSpinnerAndLabel() {
        if (controller.getBestAdoptedInEveryIteration() != null) {
            int numberOfIterations = controller.getBestAdoptedInEveryIteration().size();
            iterationSpinner.setModel(new SpinnerNumberModel(numberOfIterations, 1, numberOfIterations, 1));
            note.setText(String.format("%.2f", ((Double) graphPanel.getActualIndividual().getFitness())));
        } else {
            iterationSpinner.setModel(new SpinnerNumberModel(0, 0, 0, 1));
            note.setText("None");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iterationPanel = new javax.swing.JPanel();
        iterationSpinner = new javax.swing.JSpinner(new SpinnerNumberModel(0, 0, 0, 1));
        iterationSpinnerLabel = new javax.swing.JLabel();
        showIterationButton = new javax.swing.JButton();
        notePanel = new javax.swing.JPanel();
        noteLabel = new javax.swing.JLabel();
        note = new javax.swing.JLabel();

        iterationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("View graph at specified iteration"));

        iterationSpinnerLabel.setText("Iteration");

        showIterationButton.setText("Show");
        showIterationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showIterationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout iterationPanelLayout = new javax.swing.GroupLayout(iterationPanel);
        iterationPanel.setLayout(iterationPanelLayout);
        iterationPanelLayout.setHorizontalGroup(
            iterationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(iterationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iterationSpinnerLabel)
                .addGap(33, 33, 33)
                .addComponent(iterationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(showIterationButton)
                .addContainerGap())
        );
        iterationPanelLayout.setVerticalGroup(
            iterationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(iterationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(iterationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iterationSpinnerLabel)
                    .addComponent(iterationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showIterationButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        notePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Note"));

        noteLabel.setText("Currently shown individual's note");

        note.setText("0.00");

        javax.swing.GroupLayout notePanelLayout = new javax.swing.GroupLayout(notePanel);
        notePanel.setLayout(notePanelLayout);
        notePanelLayout.setHorizontalGroup(
            notePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(note)
                .addContainerGap())
        );
        notePanelLayout.setVerticalGroup(
            notePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(notePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noteLabel)
                    .addComponent(note))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iterationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(iterationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(notePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(214, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void showIterationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showIterationButtonActionPerformed
        int iteration = (int) iterationSpinner.getValue();
        if (iteration != 0) {
            graphPanel.displayNewBest(controller.getBestAdoptedInEveryIteration().get(iteration - 1));
            note.setText(String.format("%.2f", ((Double) controller.getBestAdoptedInEveryIteration().get(iteration - 1).getFitness())));
        } else {
            JOptionPane.showMessageDialog(this, "There's nothing to show!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_showIterationButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel iterationPanel;
    private javax.swing.JSpinner iterationSpinner;
    private javax.swing.JLabel iterationSpinnerLabel;
    private javax.swing.JLabel note;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JPanel notePanel;
    private javax.swing.JButton showIterationButton;
    // End of variables declaration//GEN-END:variables
}
